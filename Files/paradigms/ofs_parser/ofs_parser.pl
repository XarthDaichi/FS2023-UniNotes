/*
    CFG
    foo -> "hola" goo
    goo -> "!"
    foo -> "hola" goo -> "hola" "!" -> "hola!"
*/

/*

foo --> "hola", goo.
goo --> "!".

foo_1 --> [hola], goo_1.
goo_1 --> [!].
*/

/*
    CFG
    ofs_parser -> statement
    statement -> "const" ident ("=" expr)? (";")?
    ident -> [a-zA-Z_$][a-zA-Z_$0-9]*
    number -> [+-]?[0-9]+

    expr -> ident ; number
*/

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% GENERATOR %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
options(splash, '*** Generated by OFS compiler version 0.0 ***').

generator(Filename, prog(Statement_list)) :-
    open(Filename, write, Stream),
    options(splash, Header),
    generate_line_comment(Stream, Header),
    forall(member(Statement, Statement_list), 
        generate_statement(Stream, Statement)),
    close(Stream)
.

/*
generate_statement(Stream, Statement) :-
( Statement =:= const( id(I), Right )
    ->  atomic_list_concat(I, AtomicI), (Right =:= id(K)
            -> atomic_list_concat(K, AtomicK), format(Stream, 'const ~s = ~s;~n', [AtomicI, AtomicK])
            ;   ( Right =:= num(N) 
                    -> atomic_list_concat(N, AtomicN), atom_number(AtomicN, NumberN), format(Stream, 'const ~s = ~d;~n', [AtomicI, NumberN])
                    ;   ( Right =:= list(L)
                            -> generate_list_atom(L, AtomicL), atomic_list_concat(['[', AtomicL, ']'], AtomL), format(Stream, 'const ~s = ~s;~n', [AtomicI, AtomL])
                            ; format(Stream, 'const ~s = undefined;~n', [AtomicI])
                        )
                )
        )
    ; Statement = let( id(I), Right ), atomic_list_concat(I, AtomicI), (Right =:= id(K)
            -> atomic_list_concat(K, AtomicK), format(Stream, 'let ~s = ~s;~n', [AtomicI, AtomicK])
            ;   ( Right =:= num(N) 
                    -> atomic_list_concat(N, AtomicN), atom_number(AtomicN, NumberN), format(Stream, 'let ~s = ~d;~n', [AtomicI, NumberN])
                    ;   ( Right =:= list(L)
                            -> generate_list_atom(L, AtomicL), atomic_list_concat(['[', AtomicL, ']'], AtomL), format(Stream, 'let ~s = ~s;~n', [AtomicI, AtomL])
                            ; format(Stream, 'let ~s = undefined;~n', [AtomicI])
                        )
                )
        )
)
.
*/


generate_statement(Stream, const( id(I), id(K) )) :- !,
    atomic_list_concat(I, AtomicI),
    atomic_list_concat(K, AtomicK),
    format(Stream, 'const ~s = ~s;~n', [AtomicI, AtomicK])
.

generate_statement(Stream, const( id(I), num(N) )) :- !,
    atomic_list_concat(I, AtomicI),
    atomic_list_concat(N, AtomicN),
    atom_number(AtomicN, NumberN),
    format(Stream, 'const ~s = ~d;~n', [AtomicI, NumberN])
.

generate_statement(Stream, const( id(I), undefined )) :- !,
    atomic_list_concat(I, AtomicI),
    format(Stream, 'const ~s = undefined;~n', [AtomicI])
.

generate_statement(Stream, const( id(I), list(L) )):- !,
    atomic_list_concat(I, AtomicI),
    generate_list_atom(L, AtomicL),
    atomic_list_concat(['[', AtomicL, ']'], AtomL),
    format(Stream, 'const ~s = ~s;~n', [AtomicI, AtomL])
.

generate_statement(Stream, let( id(I), id(K) )) :- !,
    atomic_list_concat(I, AtomicI),
    atomic_list_concat(K, AtomicK),
    format(Stream, 'let ~s = ~s;~n', [AtomicI, AtomicK])
.

generate_statement(Stream, let( id(I), num(N) )) :- !,
    atomic_list_concat(I, AtomicI),
    atomic_list_concat(N, AtomicN),
    atom_number(AtomicN, NumberN),
    format(Stream, 'let ~s = ~d;~n', [AtomicI, NumberN])
.

generate_statement(Stream, let( id(I), undefined )) :- !,
    atomic_list_concat(I, AtomicI),
    format(Stream, 'let ~s = undefined;~n', [AtomicI])
.

generate_statement(Stream, let( id(I), list(L) )):- !,
    atomic_list_concat(I, AtomicI),
    generate_list_atom(L, AtomicL),
    atomic_list_concat(['[', AtomicL, ']'], AtomL),
    format(Stream, 'const ~s = ~s;~n', [AtomicI, AtomL])
.


generate_statement(Stream, S) :-
    format(atom(Comment), 'Statement not generated! ~q', [S]), % esto para capturar lo que el format quiere escribir
    generate_line_comment(Stream, Comment)
.

generate_line_comment(Stream, Comment) :-
    format(Stream, '// ~s ~n', [Comment])
.

generate_list_atom([id(Elem) | RS], ListAtom) :-
    generate_list_atom(RS, RListAtom),
    atomic_list_concat(Elem, AtomicElem),
    ( RListAtom \= ''
        -> atomic_list_concat([AtomicElem, ', ', RListAtom], ListAtom)
        ; atomic_list_concat([AtomicElem], ListAtom)
    )
.

generate_list_atom([num(Elem) | RS], ListAtom) :-
    generate_list_atom(RS, RListAtom),
    atomic_list_concat(Elem, AtomicElem),
    ( RListAtom \= ''
        -> atomic_list_concat([AtomicElem, ', ', RListAtom], ListAtom)
        ; atomic_list_concat([AtomicElem], ListAtom)
    )
.

generate_list_atom([list(Elem) | RS], ListAtom) :-
    generate_list_atom(RS, RListAtom),
    generate_list_atom(Elem, ElemListAtom),
    ( RListAtom \= ''
        -> atomic_list_concat(['[', ElemListAtom, ']', ', ', RListAtom], ListAtom)
        ; atomic_list_concat(['[', ElemListAtom, ']'], ListAtom)
    )
.

generate_list_atom([], '').

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% eliminate_null(+OFSAst, -OFSAstWithoutNulls)

% buscar meta-predicados include y exclude

eliminate_null( prog(SL), prog(SLWithoutNulls) ) :-
    eliminate_null_from_statementList(SL, SLWithoutNulls)
.

eliminate_null_from_statementList( [], [] ).

eliminate_null_from_statementList( [ null | SL], SLWithoutNulls ) :- !,
    eliminate_null_from_statementList(SL, SLWithoutNulls)
.

eliminate_null_from_statementList( [ S | SL], [S | SLWithoutNulls] ) :-
    eliminate_null_from_statementList(SL, SLWithoutNulls)
.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PARSER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ofs_parser( prog(SL) ) --> statement_list(SL).

statement_list( [S | SL] ) --> statement(S), statement_list(SL).
statement_list([]) --> [].

statement( const(I, RS) ) --> const, ident(I), right_side(RS).
statement( let(I, RS) ) --> let, ident(I), right_side(RS).
statement( null ) --> semicolon.
statement( comment ) --> comment.

words --> spaces, alpha_numeric_char, spaces, words.
words --> [].

right_side(E) --> assignment, expr(E).
right_side( undefined ) --> [].

expr(L) --> list(L).
expr(I) --> ident(I).
expr(N) --> number(N).

list(list(L)) -->  "[", list_content(L) ,"]", spaces.

comment --> comment_start, words, comment_end.

comment_start --> spaces, "//", spaces.
comment_end --> spaces, "\n".

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% TOKENIZER = LEXER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

semicolon --> spaces, ";", spaces.

comma --> spaces, ",", spaces.

assignment --> "=", spaces.

const --> spaces, "const", space, spaces.

let -->spaces, "let", space, spaces.

ident( id([I | RI]) ) --> letter(I), letters(RI), spaces.

number( num(N) ) --> entero(N), spaces.

% whitespaces
space --> " " ; "\t" ; "\n" ; "\r".

spaces --> space, spaces.
spaces --> [].

% numbers
decimal(D) --> [X], {member(X, [48, 49, 50, 51, 52, 53, 54, 55, 56, 57]), D is X - 48}.
sign(S) --> [X], {member(X, [45, 43]), string_codes(S, [X])}.

entero([S | Int]) --> sign(S), entero(Int).
entero([D | Int]) --> decimal(D), entero(Int).
entero([]) --> [].

% letters
accepted_char(I) --> [X], {member(X, [95, 36]), string_codes(I, [X])}.
lower_letter(I) --> [X], {member(X, [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]), string_codes(I, [X])}.
upper_letter(I) --> [X], {member(X, [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]), string_codes(I, [X])}.

letter(I) --> accepted_char(I).
letter(I) --> lower_letter(I).
letter(I) --> upper_letter(I).

alpha_numeric_char(I) --> letter(I).
alpha_numeric_char(D) --> decimal(D).

letters([I | RI]) --> alpha_numeric_char(I), letters(RI).
letters([]) --> [].

% list
list_content([Elem | RL]) --> list_element(Elem), comma, list_content(RL).
list_content([Elem]) --> list_element(Elem).

list_element(E) --> spaces, expr(E), spaces.