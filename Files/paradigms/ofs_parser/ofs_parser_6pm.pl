/*
  CFG
  foo -> "hola" goo
  goo -> "!"
  foo -> "hola" goo -> "hola" "!" = "hola!"
*/
/*
foo --> "hola", goo.
goo --> "!".


foo_1 --> [hola], goo_1.
goo_1 --> [!].
*/

/*
CFG
ofs_parser -> statement*

statement ->  "const" ident ("=" expr)? (";")?

ident -> [a-zA-Z_$][a-zA-Z_$0-9]*
number -> [+-]?[0-9]+

expr -> ident | number

*/
%%%%%%%%%%%%%%%%%%% GENERATOR %%%%%%%%%%%%%%%%%%%%%
options(splash, '*** Generated by OFS compiler version 0.0 ***').

generator(Filename, prog(StamentList) ) :-
   open(Filename, write, Stream),
   options(splash, Header),
   generate_line_comment(Stream, Header),
   forall(member(Statement, StamentList), 
          generate_statement(Stream, Statement) ),
   close(Stream)
.
generate_statement( Stream, const( id(I), id(K)) ) :- !,
   format(Stream, 'const ~s = ~s;~n', [I, K])
.
generate_statement( Stream, const( id(I), num(K)) ) :- !,
   format( Stream, 'const ~s = ~d;~n', [I, K] )
.
generate_statement( Stream, const( id(I), undefined) ) :- !,
   format( Stream, 'const ~s = undefined;~n', [I] )
.
generate_statement( Stream, S) :-
   format(atom(Comment), 'Statement not generated! ~q', [S]),
   generate_line_comment(Stream, Comment)
.

generate_line_comment( Stream, Comment ) :-
   format(Stream, '// ~s~n', [Comment])
.

%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%%%
% eliminate_null(+OFSAst, -OFSAstWithoutNulls)
eliminate_null( prog(LS), prog(LSWithoutNulls) ) :-
  eliminate_null_from_statementList(LS, LSWithoutNulls)
.
eliminate_null_from_statementList( [], [] ).
eliminate_null_from_statementList( [null | LS], LSWithoutNulls ) :- !,
   eliminate_null_from_statementList( LS, LSWithoutNulls )
.
eliminate_null_from_statementList( [S | LS], [S | LSWithoutNulls] ) :-
   eliminate_null_from_statementList( LS, LSWithoutNulls )
.
%%%%%%%%%%%%%%%%%%% PARSER %%%%%%%%%%%%%%%%%%%%%%%%

ofs_parser( prog(LS) ) --> statementList(LS).

statementList([S | LS]) --> statement(S), statementList(LS).
statementList([]) --> [].

statement( const(I, RS)) -->  const, ident(I), right_side(RS).
statement( null ) --> semicolon.

right_side(E) --> assignment, expr(E).
right_side(undefined) --> [].

expr(I) --> ident(I).
expr(N) --> number(N).

%%%%%%%%%%%%%%%%%%%%%%%%%% TOKENIZER = LEXER %%%%%%%%%%%%%

const --> spaces, "const", space, spaces.

semicolon --> spaces, ";", spaces.
%semicolon --> [].

ident( id(I) ) --> spaces, [X], spaces, {member(X, [120, 121]), string_codes(I, [X])}.

number( num(1) ) --> spaces, "1", spaces.

assignment --> spaces, "=", spaces.


space --> (" " ; "\t" ; "\n" ; "\r").

spaces --> space, spaces.
spaces --> [].